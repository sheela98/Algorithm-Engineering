#include <array>
#include <immintrin.h>
#include <iostream>

const __m256i permutation_masks[256] = {
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(1, 2, 3, 4, 5, 6, 7, 0),
    _mm256_setr_epi32(0, 2, 3, 4, 5, 6, 7, 1),
    _mm256_setr_epi32(2, 3, 4, 5, 6, 7, 0, 1),
    _mm256_setr_epi32(0, 1, 3, 4, 5, 6, 7, 2),
    _mm256_setr_epi32(1, 3, 4, 5, 6, 7, 0, 2),
    _mm256_setr_epi32(0, 3, 4, 5, 6, 7, 1, 2),
    _mm256_setr_epi32(3, 4, 5, 6, 7, 0, 1, 2),
    _mm256_setr_epi32(0, 1, 2, 4, 5, 6, 7, 3),
    _mm256_setr_epi32(1, 2, 4, 5, 6, 7, 0, 3),
    _mm256_setr_epi32(0, 2, 4, 5, 6, 7, 1, 3),
    _mm256_setr_epi32(2, 4, 5, 6, 7, 0, 1, 3),
    _mm256_setr_epi32(0, 1, 4, 5, 6, 7, 2, 3),
    _mm256_setr_epi32(1, 4, 5, 6, 7, 0, 2, 3),
    _mm256_setr_epi32(0, 4, 5, 6, 7, 1, 2, 3),
    _mm256_setr_epi32(4, 5, 6, 7, 0, 1, 2, 3),
    _mm256_setr_epi32(0, 1, 2, 3, 5, 6, 7, 4),
    _mm256_setr_epi32(1, 2, 3, 5, 6, 7, 0, 4),
    _mm256_setr_epi32(0, 2, 3, 5, 6, 7, 1, 4),
    _mm256_setr_epi32(2, 3, 5, 6, 7, 0, 1, 4),
    _mm256_setr_epi32(0, 1, 3, 5, 6, 7, 2, 4),
    _mm256_setr_epi32(1, 3, 5, 6, 7, 0, 2, 4),
    _mm256_setr_epi32(0, 3, 5, 6, 7, 1, 2, 4),
    _mm256_setr_epi32(3, 5, 6, 7, 0, 1, 2, 4),
    _mm256_setr_epi32(0, 1, 2, 5, 6, 7, 3, 4),
    _mm256_setr_epi32(1, 2, 5, 6, 7, 0, 3, 4),
    _mm256_setr_epi32(0, 2, 5, 6, 7, 1, 3, 4),
    _mm256_setr_epi32(2, 5, 6, 7, 0, 1, 3, 4),
    _mm256_setr_epi32(0, 1, 5, 6, 7, 2, 3, 4),
    _mm256_setr_epi32(1, 5, 6, 7, 0, 2, 3, 4),
    _mm256_setr_epi32(0, 5, 6, 7, 1, 2, 3, 4),
    _mm256_setr_epi32(5, 6, 7, 0, 1, 2, 3, 4),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 6, 7, 5),
    _mm256_setr_epi32(1, 2, 3, 4, 6, 7, 0, 5),
    _mm256_setr_epi32(0, 2, 3, 4, 6, 7, 1, 5),
    _mm256_setr_epi32(2, 3, 4, 6, 7, 0, 1, 5),
    _mm256_setr_epi32(0, 1, 3, 4, 6, 7, 2, 5),
    _mm256_setr_epi32(1, 3, 4, 6, 7, 0, 2, 5),
    _mm256_setr_epi32(0, 3, 4, 6, 7, 1, 2, 5),
    _mm256_setr_epi32(3, 4, 6, 7, 0, 1, 2, 5),
    _mm256_setr_epi32(0, 1, 2, 4, 6, 7, 3, 5),
    _mm256_setr_epi32(1, 2, 4, 6, 7, 0, 3, 5),
    _mm256_setr_epi32(0, 2, 4, 6, 7, 1, 3, 5),
    _mm256_setr_epi32(2, 4, 6, 7, 0, 1, 3, 5),
    _mm256_setr_epi32(0, 1, 4, 6, 7, 2, 3, 5),
    _mm256_setr_epi32(1, 4, 6, 7, 0, 2, 3, 5),
    _mm256_setr_epi32(0, 4, 6, 7, 1, 2, 3, 5),
    _mm256_setr_epi32(4, 6, 7, 0, 1, 2, 3, 5),
    _mm256_setr_epi32(0, 1, 2, 3, 6, 7, 4, 5),
    _mm256_setr_epi32(1, 2, 3, 6, 7, 0, 4, 5),
    _mm256_setr_epi32(0, 2, 3, 6, 7, 1, 4, 5),
    _mm256_setr_epi32(2, 3, 6, 7, 0, 1, 4, 5),
    _mm256_setr_epi32(0, 1, 3, 6, 7, 2, 4, 5),
    _mm256_setr_epi32(1, 3, 6, 7, 0, 2, 4, 5),
    _mm256_setr_epi32(0, 3, 6, 7, 1, 2, 4, 5),
    _mm256_setr_epi32(3, 6, 7, 0, 1, 2, 4, 5),
    _mm256_setr_epi32(0, 1, 2, 6, 7, 3, 4, 5),
    _mm256_setr_epi32(1, 2, 6, 7, 0, 3, 4, 5),
    _mm256_setr_epi32(0, 2, 6, 7, 1, 3, 4, 5),
    _mm256_setr_epi32(2, 6, 7, 0, 1, 3, 4, 5),
    _mm256_setr_epi32(0, 1, 6, 7, 2, 3, 4, 5),
    _mm256_setr_epi32(1, 6, 7, 0, 2, 3, 4, 5),
    _mm256_setr_epi32(0, 6, 7, 1, 2, 3, 4, 5),
    _mm256_setr_epi32(6, 7, 0, 1, 2, 3, 4, 5),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 7, 6),
    _mm256_setr_epi32(1, 2, 3, 4, 5, 7, 0, 6),
    _mm256_setr_epi32(0, 2, 3, 4, 5, 7, 1, 6),
    _mm256_setr_epi32(2, 3, 4, 5, 7, 0, 1, 6),
    _mm256_setr_epi32(0, 1, 3, 4, 5, 7, 2, 6),
    _mm256_setr_epi32(1, 3, 4, 5, 7, 0, 2, 6),
    _mm256_setr_epi32(0, 3, 4, 5, 7, 1, 2, 6),
    _mm256_setr_epi32(3, 4, 5, 7, 0, 1, 2, 6),
    _mm256_setr_epi32(0, 1, 2, 4, 5, 7, 3, 6),
    _mm256_setr_epi32(1, 2, 4, 5, 7, 0, 3, 6),
    _mm256_setr_epi32(0, 2, 4, 5, 7, 1, 3, 6),
    _mm256_setr_epi32(2, 4, 5, 7, 0, 1, 3, 6),
    _mm256_setr_epi32(0, 1, 4, 5, 7, 2, 3, 6),
    _mm256_setr_epi32(1, 4, 5, 7, 0, 2, 3, 6),
    _mm256_setr_epi32(0, 4, 5, 7, 1, 2, 3, 6),
    _mm256_setr_epi32(4, 5, 7, 0, 1, 2, 3, 6),
    _mm256_setr_epi32(0, 1, 2, 3, 5, 7, 4, 6),
    _mm256_setr_epi32(1, 2, 3, 5, 7, 0, 4, 6),
    _mm256_setr_epi32(0, 2, 3, 5, 7, 1, 4, 6),
    _mm256_setr_epi32(2, 3, 5, 7, 0, 1, 4, 6),
    _mm256_setr_epi32(0, 1, 3, 5, 7, 2, 4, 6),
    _mm256_setr_epi32(1, 3, 5, 7, 0, 2, 4, 6),
    _mm256_setr_epi32(0, 3, 5, 7, 1, 2, 4, 6),
    _mm256_setr_epi32(3, 5, 7, 0, 1, 2, 4, 6),
    _mm256_setr_epi32(0, 1, 2, 5, 7, 3, 4, 6),
    _mm256_setr_epi32(1, 2, 5, 7, 0, 3, 4, 6),
    _mm256_setr_epi32(0, 2, 5, 7, 1, 3, 4, 6),
    _mm256_setr_epi32(2, 5, 7, 0, 1, 3, 4, 6),
    _mm256_setr_epi32(0, 1, 5, 7, 2, 3, 4, 6),
    _mm256_setr_epi32(1, 5, 7, 0, 2, 3, 4, 6),
    _mm256_setr_epi32(0, 5, 7, 1, 2, 3, 4, 6),
    _mm256_setr_epi32(5, 7, 0, 1, 2, 3, 4, 6),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 7, 5, 6),
    _mm256_setr_epi32(1, 2, 3, 4, 7, 0, 5, 6),
    _mm256_setr_epi32(0, 2, 3, 4, 7, 1, 5, 6),
    _mm256_setr_epi32(2, 3, 4, 7, 0, 1, 5, 6),
    _mm256_setr_epi32(0, 1, 3, 4, 7, 2, 5, 6),
    _mm256_setr_epi32(1, 3, 4, 7, 0, 2, 5, 6),
    _mm256_setr_epi32(0, 3, 4, 7, 1, 2, 5, 6),
    _mm256_setr_epi32(3, 4, 7, 0, 1, 2, 5, 6),
    _mm256_setr_epi32(0, 1, 2, 4, 7, 3, 5, 6),
    _mm256_setr_epi32(1, 2, 4, 7, 0, 3, 5, 6),
    _mm256_setr_epi32(0, 2, 4, 7, 1, 3, 5, 6),
    _mm256_setr_epi32(2, 4, 7, 0, 1, 3, 5, 6),
    _mm256_setr_epi32(0, 1, 4, 7, 2, 3, 5, 6),
    _mm256_setr_epi32(1, 4, 7, 0, 2, 3, 5, 6),
    _mm256_setr_epi32(0, 4, 7, 1, 2, 3, 5, 6),
    _mm256_setr_epi32(4, 7, 0, 1, 2, 3, 5, 6),
    _mm256_setr_epi32(0, 1, 2, 3, 7, 4, 5, 6),
    _mm256_setr_epi32(1, 2, 3, 7, 0, 4, 5, 6),
    _mm256_setr_epi32(0, 2, 3, 7, 1, 4, 5, 6),
    _mm256_setr_epi32(2, 3, 7, 0, 1, 4, 5, 6),
    _mm256_setr_epi32(0, 1, 3, 7, 2, 4, 5, 6),
    _mm256_setr_epi32(1, 3, 7, 0, 2, 4, 5, 6),
    _mm256_setr_epi32(0, 3, 7, 1, 2, 4, 5, 6),
    _mm256_setr_epi32(3, 7, 0, 1, 2, 4, 5, 6),
    _mm256_setr_epi32(0, 1, 2, 7, 3, 4, 5, 6),
    _mm256_setr_epi32(1, 2, 7, 0, 3, 4, 5, 6),
    _mm256_setr_epi32(0, 2, 7, 1, 3, 4, 5, 6),
    _mm256_setr_epi32(2, 7, 0, 1, 3, 4, 5, 6),
    _mm256_setr_epi32(0, 1, 7, 2, 3, 4, 5, 6),
    _mm256_setr_epi32(1, 7, 0, 2, 3, 4, 5, 6),
    _mm256_setr_epi32(0, 7, 1, 2, 3, 4, 5, 6),
    _mm256_setr_epi32(7, 0, 1, 2, 3, 4, 5, 6),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(1, 2, 3, 4, 5, 6, 0, 7),
    _mm256_setr_epi32(0, 2, 3, 4, 5, 6, 1, 7),
    _mm256_setr_epi32(2, 3, 4, 5, 6, 0, 1, 7),
    _mm256_setr_epi32(0, 1, 3, 4, 5, 6, 2, 7),
    _mm256_setr_epi32(1, 3, 4, 5, 6, 0, 2, 7),
    _mm256_setr_epi32(0, 3, 4, 5, 6, 1, 2, 7),
    _mm256_setr_epi32(3, 4, 5, 6, 0, 1, 2, 7),
    _mm256_setr_epi32(0, 1, 2, 4, 5, 6, 3, 7),
    _mm256_setr_epi32(1, 2, 4, 5, 6, 0, 3, 7),
    _mm256_setr_epi32(0, 2, 4, 5, 6, 1, 3, 7),
    _mm256_setr_epi32(2, 4, 5, 6, 0, 1, 3, 7),
    _mm256_setr_epi32(0, 1, 4, 5, 6, 2, 3, 7),
    _mm256_setr_epi32(1, 4, 5, 6, 0, 2, 3, 7),
    _mm256_setr_epi32(0, 4, 5, 6, 1, 2, 3, 7),
    _mm256_setr_epi32(4, 5, 6, 0, 1, 2, 3, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 5, 6, 4, 7),
    _mm256_setr_epi32(1, 2, 3, 5, 6, 0, 4, 7),
    _mm256_setr_epi32(0, 2, 3, 5, 6, 1, 4, 7),
    _mm256_setr_epi32(2, 3, 5, 6, 0, 1, 4, 7),
    _mm256_setr_epi32(0, 1, 3, 5, 6, 2, 4, 7),
    _mm256_setr_epi32(1, 3, 5, 6, 0, 2, 4, 7),
    _mm256_setr_epi32(0, 3, 5, 6, 1, 2, 4, 7),
    _mm256_setr_epi32(3, 5, 6, 0, 1, 2, 4, 7),
    _mm256_setr_epi32(0, 1, 2, 5, 6, 3, 4, 7),
    _mm256_setr_epi32(1, 2, 5, 6, 0, 3, 4, 7),
    _mm256_setr_epi32(0, 2, 5, 6, 1, 3, 4, 7),
    _mm256_setr_epi32(2, 5, 6, 0, 1, 3, 4, 7),
    _mm256_setr_epi32(0, 1, 5, 6, 2, 3, 4, 7),
    _mm256_setr_epi32(1, 5, 6, 0, 2, 3, 4, 7),
    _mm256_setr_epi32(0, 5, 6, 1, 2, 3, 4, 7),
    _mm256_setr_epi32(5, 6, 0, 1, 2, 3, 4, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 6, 5, 7),
    _mm256_setr_epi32(1, 2, 3, 4, 6, 0, 5, 7),
    _mm256_setr_epi32(0, 2, 3, 4, 6, 1, 5, 7),
    _mm256_setr_epi32(2, 3, 4, 6, 0, 1, 5, 7),
    _mm256_setr_epi32(0, 1, 3, 4, 6, 2, 5, 7),
    _mm256_setr_epi32(1, 3, 4, 6, 0, 2, 5, 7),
    _mm256_setr_epi32(0, 3, 4, 6, 1, 2, 5, 7),
    _mm256_setr_epi32(3, 4, 6, 0, 1, 2, 5, 7),
    _mm256_setr_epi32(0, 1, 2, 4, 6, 3, 5, 7),
    _mm256_setr_epi32(1, 2, 4, 6, 0, 3, 5, 7),
    _mm256_setr_epi32(0, 2, 4, 6, 1, 3, 5, 7),
    _mm256_setr_epi32(2, 4, 6, 0, 1, 3, 5, 7),
    _mm256_setr_epi32(0, 1, 4, 6, 2, 3, 5, 7),
    _mm256_setr_epi32(1, 4, 6, 0, 2, 3, 5, 7),
    _mm256_setr_epi32(0, 4, 6, 1, 2, 3, 5, 7),
    _mm256_setr_epi32(4, 6, 0, 1, 2, 3, 5, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 6, 4, 5, 7),
    _mm256_setr_epi32(1, 2, 3, 6, 0, 4, 5, 7),
    _mm256_setr_epi32(0, 2, 3, 6, 1, 4, 5, 7),
    _mm256_setr_epi32(2, 3, 6, 0, 1, 4, 5, 7),
    _mm256_setr_epi32(0, 1, 3, 6, 2, 4, 5, 7),
    _mm256_setr_epi32(1, 3, 6, 0, 2, 4, 5, 7),
    _mm256_setr_epi32(0, 3, 6, 1, 2, 4, 5, 7),
    _mm256_setr_epi32(3, 6, 0, 1, 2, 4, 5, 7),
    _mm256_setr_epi32(0, 1, 2, 6, 3, 4, 5, 7),
    _mm256_setr_epi32(1, 2, 6, 0, 3, 4, 5, 7),
    _mm256_setr_epi32(0, 2, 6, 1, 3, 4, 5, 7),
    _mm256_setr_epi32(2, 6, 0, 1, 3, 4, 5, 7),
    _mm256_setr_epi32(0, 1, 6, 2, 3, 4, 5, 7),
    _mm256_setr_epi32(1, 6, 0, 2, 3, 4, 5, 7),
    _mm256_setr_epi32(0, 6, 1, 2, 3, 4, 5, 7),
    _mm256_setr_epi32(6, 0, 1, 2, 3, 4, 5, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(1, 2, 3, 4, 5, 0, 6, 7),
    _mm256_setr_epi32(0, 2, 3, 4, 5, 1, 6, 7),
    _mm256_setr_epi32(2, 3, 4, 5, 0, 1, 6, 7),
    _mm256_setr_epi32(0, 1, 3, 4, 5, 2, 6, 7),
    _mm256_setr_epi32(1, 3, 4, 5, 0, 2, 6, 7),
    _mm256_setr_epi32(0, 3, 4, 5, 1, 2, 6, 7),
    _mm256_setr_epi32(3, 4, 5, 0, 1, 2, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 4, 5, 3, 6, 7),
    _mm256_setr_epi32(1, 2, 4, 5, 0, 3, 6, 7),
    _mm256_setr_epi32(0, 2, 4, 5, 1, 3, 6, 7),
    _mm256_setr_epi32(2, 4, 5, 0, 1, 3, 6, 7),
    _mm256_setr_epi32(0, 1, 4, 5, 2, 3, 6, 7),
    _mm256_setr_epi32(1, 4, 5, 0, 2, 3, 6, 7),
    _mm256_setr_epi32(0, 4, 5, 1, 2, 3, 6, 7),
    _mm256_setr_epi32(4, 5, 0, 1, 2, 3, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 5, 4, 6, 7),
    _mm256_setr_epi32(1, 2, 3, 5, 0, 4, 6, 7),
    _mm256_setr_epi32(0, 2, 3, 5, 1, 4, 6, 7),
    _mm256_setr_epi32(2, 3, 5, 0, 1, 4, 6, 7),
    _mm256_setr_epi32(0, 1, 3, 5, 2, 4, 6, 7),
    _mm256_setr_epi32(1, 3, 5, 0, 2, 4, 6, 7),
    _mm256_setr_epi32(0, 3, 5, 1, 2, 4, 6, 7),
    _mm256_setr_epi32(3, 5, 0, 1, 2, 4, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 5, 3, 4, 6, 7),
    _mm256_setr_epi32(1, 2, 5, 0, 3, 4, 6, 7),
    _mm256_setr_epi32(0, 2, 5, 1, 3, 4, 6, 7),
    _mm256_setr_epi32(2, 5, 0, 1, 3, 4, 6, 7),
    _mm256_setr_epi32(0, 1, 5, 2, 3, 4, 6, 7),
    _mm256_setr_epi32(1, 5, 0, 2, 3, 4, 6, 7),
    _mm256_setr_epi32(0, 5, 1, 2, 3, 4, 6, 7),
    _mm256_setr_epi32(5, 0, 1, 2, 3, 4, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(1, 2, 3, 4, 0, 5, 6, 7),
    _mm256_setr_epi32(0, 2, 3, 4, 1, 5, 6, 7),
    _mm256_setr_epi32(2, 3, 4, 0, 1, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 3, 4, 2, 5, 6, 7),
    _mm256_setr_epi32(1, 3, 4, 0, 2, 5, 6, 7),
    _mm256_setr_epi32(0, 3, 4, 1, 2, 5, 6, 7),
    _mm256_setr_epi32(3, 4, 0, 1, 2, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 4, 3, 5, 6, 7),
    _mm256_setr_epi32(1, 2, 4, 0, 3, 5, 6, 7),
    _mm256_setr_epi32(0, 2, 4, 1, 3, 5, 6, 7),
    _mm256_setr_epi32(2, 4, 0, 1, 3, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 4, 2, 3, 5, 6, 7),
    _mm256_setr_epi32(1, 4, 0, 2, 3, 5, 6, 7),
    _mm256_setr_epi32(0, 4, 1, 2, 3, 5, 6, 7),
    _mm256_setr_epi32(4, 0, 1, 2, 3, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(1, 2, 3, 0, 4, 5, 6, 7),
    _mm256_setr_epi32(0, 2, 3, 1, 4, 5, 6, 7),
    _mm256_setr_epi32(2, 3, 0, 1, 4, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 3, 2, 4, 5, 6, 7),
    _mm256_setr_epi32(1, 3, 0, 2, 4, 5, 6, 7),
    _mm256_setr_epi32(0, 3, 1, 2, 4, 5, 6, 7),
    _mm256_setr_epi32(3, 0, 1, 2, 4, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(1, 2, 0, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(0, 2, 1, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(2, 0, 1, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(1, 0, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7),
    _mm256_setr_epi32(0, 1, 2, 3, 4, 5, 6, 7)};

// partition a single vector, return how many values are greater than pivot
inline int partition_vec(__m256i &curr_vec, const __m256i &pivot_vec) {
  // which elements are larger than the pivot
  __m256i compared = _mm256_cmpgt_epi32(curr_vec, pivot_vec);
  // extract the highest bit from each integer of the vector
  int idx = _mm256_movemask_ps(reinterpret_cast<__m256>(compared));
  // how many ones, each 1 stands for an element greater than pivot
  int amount_gt_pivot = _mm_popcnt_u32((idx));
  // permute elements larger than pivot to the right, and,
  // smaller than or equal to the pivot, to the left
  // permutation_masks is a precalculated lookup table
  curr_vec = _mm256_permutevar8x32_epi32(curr_vec, permutation_masks[idx]);
  // return how many elements are greater than pivot
  return amount_gt_pivot;
}

int main() {
  using namespace std;
  auto curr_vec = _mm256_setr_epi32(1, 4, 8, 5, 7, 2, 3, 6); // vector to partition
  auto pivot_vec = _mm256_set1_epi32(6); // pivot vector
  int amount_gt_pivot = partition_vec(curr_vec, pivot_vec);

  // two numbers (8, 7) are greater than pivot (pivot is 6)
  cout << "amount_gt_pivot: " << amount_gt_pivot << endl;

  // outputs partitioned vector: 1 4 5 2 3 6 | 8 7
  for (auto num : (array<int, 8> &)curr_vec) {
    cout << num << " ";
  }
}
